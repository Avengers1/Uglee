{"ts":1340989261410,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* Last changed 3/7/2012 @ 2016 */\n\n/* AMM = \"roomid\":\"4ea390ac14169c0cc3caa078\", */\n/* Bootcamp = \"roomid\":\"4f46ecd8590ca24b66000bfb\", */\n/* MAW = \"roomid\":\"4ef82538590ca23e33001b3b\", */\n\nvar fs = require('fs');\nvar Bot = require('ttapi');\n\n/*  Creates the config object */\nvar config;\ntry {\n    config = JSON.parse(fs.readFileSync('config.json', 'ascii'));\n} catch (e) {\n    console.log(e);\n    console.log('Ensure that config.json is present in this directory.');\n    process.exit(0);\n}\n\n//Creates mysql db object\nif (config.database.usedb) {\n    try {\n        mysql = require('mysql');\n    } catch (e) {\n        console.log(e);\n        console.log('It is likely that you do not have the mysql node module installed.' + '\\nUse the command \\'npm install mysql\\' to install.');\n        console.log('Starting bot without database functionality.');\n        config.database.usedb = false;\n    }\n\n    //Connects to mysql server\n    try {\n        client = mysql.createClient(config.database.login);\n    } catch (e) {\n        console.log(e);\n        console.log('Make sure that a mysql server instance is running and that the ' + 'username and password information in config.js are correct.');\n        console.log('Starting bot without database functionality.');\n        config.database.usedb = false;\n    }\n}\n\n// http://nodejs.org/api.html#_child_processes\nvar sys = require('util');\nvar exec = require('child_process').exec;\nvar child;\n\n/* Sends me a message every time Uglee reboots */\nchild = exec(\"t set active GilimYurhig\", function(error, stdout, stderr) {\n    if (error !== null) {\n        console.log('exec error: ' + error);\n    }\n\n    child = exec(\"t update 'd @mikewills This is Uglee, I rebooted for you!'\", function(error, stdout, stderr) {\n        if (error !== null) {\n            console.log('exec error: ' + error);\n        }\n    });\n});\n\n\n/*  banned users */\nvar bannedUsers = ['4f7a1a75aaa5cd26ee005b5f', '4f7bd3adeb35c15efd00005a'];\n\n//Current song info\nvar currentsong = {\n    artist: null,\n    song: null,\n    djname: null,\n    djid: null,\n    up: 0,\n    down: 0,\n    listeners: 0,\n    snags: 0\n};\nvar usersList = {}; //A list of users in the room\nvar dislike = false;\nvar voted = false;\nvar moderators = [];\nvar djing = false;\nvar votelog = [];\nvar djs = [];\n\nvar djQueue = [];\nvar nextDj = null;\nvar nextDjTime = null;\nvar queueRefreshIntervalId = null;\nvar missedQueue = [];\nvar qPosn = 0;\n\nvar acceptingVotes = false;\nvar incomingVotes = {\n    One: 0,\n    Two: 0,\n    Three: 0,\n    Four: 0,\n    Five: 0\n};\nvar voteStart = null;\nvar refreshIntervalId = null;\nvar botOnTable = false;\nvar ctsSequenceCount = -1;\nvar ctsSequenceMax = 0;\nvar ctsActive = false;\nvar ctsExcludedWords = [\"in\", \"the\", \"is\", \"that\", \"and\", \"a\", \"an\"];\nvar ctsLastWords = null;\nvar alreadyRolled = false;\n\nvar isAmmDown = false;\nvar ammResponded = false;\nvar ammRefreshIntervalId = null;\nvar lastAnnouncement = new Date();\nvar announcement = \"HEAR YE! HEAR YE! On 6/17 @ 10pm CST, @PodcastMike will be marking a trio of events: 1 year on TT, 20k for his avatar, and 10k in room points. Come and help us celebrate!\";\n\nvar bot = new Bot(config.botinfo.auth, config.botinfo.userid);\n\nfunction PostAnnouncement() {\n    var roll = Math.ceil(Math.random() * 8);\n    var now = new Date();\n    var timePassed = Math.round((now - lastAnnouncement) / 3600000);\n    if (roll == 1 && timePassed > 2) {\n        bot.speak(announcement);\n        lastAnnouncement = new Date();\n    }\n}\n\nfunction CheckThatAMMisAlive() {\n    bot.pm(\"!count\", \"4e7bf475a3f7511657030c34\");\n    isAmmDown = false;\n    ammResponded = false;\n    ammRefreshIntervalId = setInterval(HasAmmResponded, 30000);\n    console.log(\"Sent Request\");\n    //PostAnnouncement();\n}\n//setInterval(CheckThatAMMisAlive, 60000); // Check every 15 minutes\nsetInterval(CheckThatAMMisAlive, 900000); // Check every 15 minutes\n\nfunction HasAmmResponded() {\n    console.log(\"Checking AMM status\");\n    console.log(ammResponded);\n    if (!ammResponded) { /* Sends me a message every time Uglee reboots */\n        child = exec(\"t set active GilimYurhig\", function(error, stdout, stderr) {\n            if (error !== null) {\n                console.log('exec error: ' + error);\n            }\n\n            child = exec(\"t update '@mikewills This is Uglee, AMM is being a jerk and not answering me.'\", function(error, stdout, stderr) {\n                if (error !== null) {\n                    console.log('exec error: ' + error);\n                }\n            });\n        });\n    }\n    clearInterval(ammRefreshIntervalId);\n}\n\n/*  Checks if the user id is present in the admin list. Authentication\n    for admin-only privileges. */\nfunction admin(userid) {\n    for (var i in config.admins.admins) {\n        if (userid == config.admins.admins[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/*  Checks if the user id is present in the moderator list. Authentication\n    for moderator-only privileges. */\nfunction isMod(userid) {\n    for (var i in moderators) {\n        if (userid == moderators[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction isBanned(userid) {\n    if (bannedUsers.indexOf(userid) == -1) {\n        return false;\n    } else {\n        console.log(\"Banned\");\n        return true;\n    }\n}\n\n/* Search the array for the value */\n\nfunction findAction(query, arr) {\n    query = escape(query);\n    for (var i = 0, l = arr.length; i < l; i++) {\n        var item = arr[i];\n        var reg = RegExp(escape(item.name), \"i\");\n        if (reg.test(query)) return i;\n    }\n    return -1;\n}\n\n/* Add a brief pause to script */\n\nfunction pause(ms) {\n    ms += new Date().getTime();\n    while (new Date() < ms) {}\n}\n\nfunction killBot(userid) {\n    if (admin(userid)) {\n        bot.pm(\"Sorry I disappointed you master.\", userid);\n        bot.roomDeregister();\n        process.exit(0);\n    } else {\n        bot.pm(\"You ain't me master.\", userid);\n    }\n}\n\nfunction addSong(userid) {\n    if (admin(userid)) {\n        bot.roomInfo(true, function(data) {\n            var newSong = data.room.metadata.current_song._id;\n            var songName = data.room.metadata.current_song.metadata.song;\n            bot.playlistAdd(newSong);\n            bot.snag();\n            //bot.speak(\"Hope you don't mind me adding \\\"\" + songName + \"\\\" to me queue.\");\n            bot.vote('up');\n        });\n    } else {\n        bot.speak(\"You ain't me master.\");\n    }\n}\n\nfunction stepUp() {\n    bot.addDj();\n    bot.speak(\"Imma help you out for a bit.\");\n    djing = true;\n}\n\nfunction stepDown() {\n    bot.speak(\"Looks like me not needed anymore.\");\n    pause(500);\n    bot.speak(\"/me pouts and slowly walks to the floor.\");\n    pause(500);\n    bot.remDj();\n    djing = false;\n}\n\nfunction mustAwesome(id) {\n    if (id == 1) {\n        bot.speak(\"DJs: The gorilla doesn't like jerks. Please support your fellow DJs by clicking awesome for their songs. See Rule #3.\");\n        pause(250);\n        bot.speak(\"Me have heard the screams... not pleasant.\");\n    } else if (id == 2) {\n        bot.speak(\"DJs: Please support your fellow DJs by clicking the awesome button! It's easy and it's a rule! See #3. Just type !rules to see. Otherwise you WILL be booted off in two songs.\");\n    }\n}\n\n//Sets up the database\n\nfunction setUpDatabase() {\n    //Creates DB and tables if needed, connects to db\n    client.query('CREATE DATABASE ' + config.database.dbname, function(error) {\n        if (error && error.number != mysql.ERROR_DB_CREATE_EXISTS) {\n            throw (error);\n        }\n    });\n    client.query('USE ' + config.database.dbname);\n\n    //song table\n    client.query('CREATE TABLE ' + config.database.tablenames.song + '(id INT(11) AUTO_INCREMENT PRIMARY KEY,' + ' artist VARCHAR(255),' + ' song VARCHAR(255),' + ' djid VARCHAR(255),' + ' up INT(3),' + ' down INT(3),' + ' listeners INT(3),' + ' started DATETIME,' + ' snags INT(3),' + ' bonus INT(3))',\n\n    function(error) {\n        //Handle an error if it's not a table already exists error\n        if (error && error.number != 1050) {\n            throw (error);\n        }\n    });\n\n    //chat table\n    client.query('CREATE TABLE ' + config.database.tablenames.chat + '(id INT(11) AUTO_INCREMENT PRIMARY KEY,' + ' userid VARCHAR(255),' + ' chat VARCHAR(255),' + ' time DATETIME)', function(error) {\n        //Handle an error if it's not a table already exists error\n        if (error && error.number != 1050) {\n            throw (error);\n        }\n    });\n\n    //user table\n    client.query('CREATE TABLE ' + config.database.tablenames.user + '(userid VARCHAR(255), ' + 'username VARCHAR(255), ' + 'lastseen DATETIME, ' + 'PRIMARY KEY (userid, username))', function(error) {\n        //Handle an error if it's not a table already exists error\n        if (error && error.number != 1050) {\n            throw (error);\n        }\n    });\n}\n\nfunction populateSongData(data) {\n    currentsong.artist = data.room.metadata.current_song.metadata.artist;\n    currentsong.song = data.room.metadata.current_song.metadata.song;\n    currentsong.djname = data.room.metadata.current_song.djname;\n    currentsong.djid = data.room.metadata.current_song.djid;\n    currentsong.up = data.room.metadata.upvotes;\n    currentsong.down = data.room.metadata.downvotes;\n    currentsong.listeners = data.room.metadata.listeners;\n    currentsong.started = data.room.metadata.current_song.starttime;\n    currentsong.snags = 0;\n}\n\n//Adds the song data to the songdata table.\n//This runs on the endsong event.\n\nfunction addSongToDb(data) {\n    client.query('INSERT INTO ' + config.database.dbname + '.' + config.database.tablenames.song + ' ' + 'SET artist = ?,song = ?, djid = ?, up = ?, down = ?,' + 'listeners = ?, started = NOW(), snags = ?, bonus = ?', [currentsong.artist, currentsong.song, currentsong.djid, currentsong.up, currentsong.down, currentsong.listeners, currentsong.snags, 0]);\n}\n\nfunction VoteNextSong() {\n    bot.speak(\"I want you to vote what song I should play next! Your choices are: \");\n    incomingVotes = {\n        One: 0,\n        Two: 0,\n        Three: 0,\n        Four: 0,\n        Five: 0\n    };\n    bot.playlistAll(function(data) {\n        var options = \"\";\n        for (var i = 0; i <= data.list.length && i <= 4; i++) {\n            options += \"[\" + (i + 1) + \"] \" + data.list[i].metadata.song + \" by \" + data.list[i].metadata.artist + \"\\n\";\n        }\n        bot.speak(options);\n        //console.log(options);\n        pause(500);\n        bot.speak(\"Type in your choice by typing the number of the song you would like to hear. Voting is open for 1 minute.\");\n        acceptingVotes = true;\n        voteStart = new Date();\n        refreshIntervalId = setInterval(VotingEnded, 10000);\n    });\n}\n\nfunction ProcessVote(vote) {\n    if (acceptingVotes) {\n        if (vote == \"1\") {\n            incomingVotes.One++;\n        } else if (vote == \"2\") {\n            incomingVotes.Two++;\n        } else if (vote == \"3\") {\n            incomingVotes.Three++;\n        } else if (vote == \"4\") {\n            incomingVotes.Four++;\n        } else if (vote == \"5\") {\n            incomingVotes.Five++;\n        }\n        console.log(incomingVotes);\n    }\n}\n\nfunction VotingEnded() {\n    var currentTime = new Date();\n    if (currentTime.getTime() - voteStart.getTime() >= (60000)) {\n        acceptingVotes = false;\n        clearInterval(refreshIntervalId);\n\n        var topVote = 1;\n        var topVoteCount = incomingVotes.One;\n\n        if (incomingVotes.Two > topVoteCount) {\n            topVote = 2;\n            topVoteCount = incomingVotes.Two;\n        }\n\n        if (incomingVotes.Three > topVoteCount) {\n            topVote = 3;\n            topVoteCount = incomingVotes.Three;\n        }\n\n        if (incomingVotes.Four > topVoteCount) {\n            topVote = 4;\n            topVoteCount = incomingVotes.Four;\n        }\n\n        if (incomingVotes.Five > topVoteCount) {\n            topVote = 5;\n            topVoteCount = incomingVotes.Five;\n        }\n        console.log(\"Vote \" + topVote + \" wins!\");\n\n        var winner = topVote - 1;\n        console.log(winner);\n        bot.playlistReorder(winner, 0, function() {\n            //bot.playlistAll(function(data) {\n            //bot.speak(\"Next song is: \" + data.list[0].metadata.song + \" by \" + data.list[0].metadata.artist);\n            //console.log(\"Next song is: \" + data.list[0].metadata.song + \" by \" + data.list[0].metadata.artist);\n            //});\n        });\n    }\n}\n\n/* ============== */\n/* CheckAutoDj - The bot will see if it should step up the decks */\n/* ============== */\nvar CheckAutoDj = function() {\n        if (config.autodj) {\n            bot.roomInfo(function(data) {\n                if (data.room.metadata.djcount !== 0) {\n                    if (data.room.metadata.djcount === 1 && IsBot(data.room.metadata.djs[0])) {\n                        stepDown();\n                        return;\n                    }\n\n                    if (data.room.metadata.djcount <= (data.room.metadata.max_djs - 2)) {\n                        if (!botOnTable) {\n                            stepUp();\n                            return;\n                        }\n                    }\n\n                    if (data.room.metadata.djcount == data.room.metadata.max_djs) {\n                        if (botOnTable && !botIsPlayingSong) {\n                            stepDown();\n                            return;\n                        }\n                    }\n                }\n            });\n        }\n    };\n\nvar CheckCTS = function() {\n        var isOk = false;\n        /*var ctsSequenceCount = 0;\n        var ctsSequenceMax = 0;\n        var ctsActive = false;\n        var ctsExcludedWords = [\"in\", \"the\", \"is\", \"that\"];\n        var ctsLastWords = [];*/\n        console.log(ctsLastWords);\n        var song = currentsong.song.toLowerCase().replace(\"'\", \" \").replace(\"\\\"\", \" \").replace(\"(\", \" \").replace(\")\", \" \").replace(\".\", \" \").replace(\"/\", \" \").replace(\"\\\\\", \" \").replace(\"  \", \" \");\n        console.log(song);\n        var words = song.split(\" \");\n        console.log(words);\n        if (ctsLastWords !== null) {\n            for (var i = 0; i <= words.length; i++) {\n                if (ctsLastWords.indexOf(words[i]) != -1) {\n                    isOk = true;\n                }\n            }\n        } else {\n            isOk = true;\n        }\n\n        if (isOk) {\n            ctsLastWords = words;\n            ctsSequenceCount++;\n            if (ctsSequenceCount > ctsSequenceMax) {\n                ctsSequenceMax = ctsSequenceCount;\n            }\n            bot.speak(\"Sweet! The score is \" + ctsSequenceCount + \". The next DJ needs to play a song with at least one of the following words: \" + ctsLastWords);\n        } else {\n            if (ctsSequenceCount > ctsSequenceMax) {\n                ctsSequenceMax = ctsSequenceCount;\n                SetCacheValue('ctsSequenceMax', ctsSequenceMax);\n            }\n            bot.speak(\"Boo! The game is over with a score of \" + ctsSequenceCount + \". The highest score is \" + ctsSequenceMax);\n            console.log(\"Game ended\");\n            ctsActive = false;\n            ctsSequenceCount = -1;\n            ctsLastWords = null;\n        }\n    };\n\nfunction dateDiff(a, b, format) {\n    var milliseconds = toDate(a) - toDate(b);\n    var days = milliseconds / 86400000;\n    var hours = milliseconds / 3600000;\n    var weeks = milliseconds / 604800000;\n    var months = milliseconds / 2628000000;\n    var years = milliseconds / 31557600000;\n    if (format == \"h\") {\n        return Math.round(hours);\n    }\n    if (format == \"d\") {\n        return Math.round(days);\n    }\n    if (format == \"w\") {\n        return Math.round(weeks);\n    }\n    if (format == \"m\") {\n        return Math.round(months);\n    }\n    if (format == \"y\") {\n        return Math.round(years);\n    }\n}\n\nvar findIdle = function(senderid) {\n        var pmText = \"The following users have been idle for more than 6 hours: \";\n        for (var z in usersList) {\n            //console.log(usersList[z]);\n            //if (usersList[z].laptop != \"iphone\" || usersList[z].laptop != \"android\") {\n            //console.log(usersList[z]);\n            var startDate = new Date();\n            var idleTime = Math.round((startDate - usersList[z].lastActivity) / 3600000); // in hours\n            //var idleTime = Math.round((startDate - usersList[z].lastActivity) / 60000); // for testing minutes\n            console.log(usersList[z].name + \": \" + idleTime);\n            if (idleTime >= 6) {\n                pmText += usersList[z].name + \": \" + idleTime + \" on \" + usersList[z].laptop + \" | \";\n            }\n            //}\n        }\n        bot.pm(pmText, senderid);\n    };\n\nvar summonModerators = function() {\n        child = exec(\"t set active GilimYurhig\", function(error, stdout, stderr) {\n            if (error !== null) {\n                console.log('exec error: ' + error);\n            }\n\n            child = exec(\"t update 'Uglee: A moderator is requested in AMM. @mikewills @techguyjason @mikebdotorg'\", function(error, stdout, stderr) {\n                if (error !== null) {\n                    console.log('exec error: ' + error);\n                }\n            });\n        });\n    };\n\nvar summonBouncer = function() {\n        bot.speak(\"HEY BOUNCER! Weee neeeeed yooooouuu!!!!!\");\n        child = exec(\"cd /home/mikewills/ && ./amm.sh\", function(error, stdout, stderr) {\n            if (error !== null) {\n                console.log('exec error: ' + error);\n            }\n        });\n    };\n\nvar dismissBouncer = function() {\n        bot.speak(\"Thanks for helping us out Bouncer. We don't need you anymore.\");\n        child = exec(\"cd /home/mikewills/ && ./killamm.sh\", function(error, stdout, stderr) {\n            if (error !== null) {\n                console.log('exec error: ' + error);\n            }\n        });\n    };\n\n/* ============================ */\n/* ready */\n/* ============================ */\nbot.on('ready', function(data) {\n\t\ntry {\n\n    if (config.database.usedb) {\n        setUpDatabase();\n        client.query(\"SELECT `value` FROM \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" WHERE `key` = 'enableQueue'\", function select(error, results, fields) {\n            if (results.length !== 0) {\n                if (results[0]['value'] == 1) {\n                    config.enableQueue = true;\n                } else {\n                    config.enableQueue = false;\n                }\n            }\n        });\n        client.query(\"SELECT `value` FROM \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" WHERE `key` = 'djQueue'\", function select(error, results, fields) {\n            if (results.length !== 0) {\n                djQueue = results[0]['value'].split(\",\");\n            }\n        });\n\n        GetCacheValue('ctsSequenceMax', function(value) {\n            if (value !== null) {\n                ctsSequenceMax = value;\n            }\n        });\n    }\n\n    bot.roomRegister(config.roomid);\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n\n});\n\n/* ============================ */\n/* roomchanged */\n/* ============================ */\nbot.on('roomChanged', function(data) {\n\ntry {\n\n    if (config.consolelog) {\n        //console.log('Room Changed',  data);\n        console.log('Moderator IDs', data.room.metadata.moderator_id);\n        console.log('DJs', data.room.metadata.djs);\n    }\n\n    djs = data.room.metadata.djs;\n    moderators = data.room.metadata.moderator_id;\n\n    //Fill currentsong array with room data\n    if ((data.room !== null) && (data.room.metadata !== null)) {\n        if (data.room.metadata.current_song !== null) {\n            populateSongData(data);\n        }\n    }\n\n    //Repopulates usersList array.\n    var users = data.users;\n    for (var i in users) {\n        var user = users[i];\n        user.lastActivity = new Date();\n        usersList[user.userid] = user;\n    }\n\n    //Adds all active users to the users table - updates lastseen if we've seen\n    //them before, adds a new entry if they're new or have changed their username\n    //since the last time we've seen them\n    if (config.database.usedb) {\n        for (i in users) {\n            if (users[i].name !== null) {\n                client.query('INSERT INTO ' + config.database.dbname + '.' + config.database.tablenames.user + ' (userid, username, lastseen)' + 'VALUES (?, ?, NOW()) ON DUPLICATE KEY UPDATE lastseen = NOW()', [users[i].userid, users[i].name]);\n            }\n        }\n    }\n\n    UpdateDjs();\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n\n});\n\n/* ============================ */\n/* newsong */\n/* ============================ */\nbot.on('newsong', function(data) {\n\ntry {\n\n    alreadyRolled = false;\n\n    //Populate new song data in currentsong\n    populateSongData(data);\n\n    delete require.cache['./actions.js'];\n    var Actions = require('./actions.js');\n\n    if (config.consolelog) {\n        console.log('newsong', data.room.metadata.current_song.metadata);\n    }\n\n    if (ctsActive) {\n        CheckCTS();\n    }\n\n    /* Update the moderator list */\n    moderators = data.room.metadata.moderator_id;\n\n    /* Autobop if DJing */\n    if (djing) {\n        bot.vote('up');\n        voted = true;\n        console.log(\"Autobop by DJing\");\n    }\n\n    /* Selectively awesome/lame songs */\n    if (config.newsongcomments && !voted) {\n        //Populate new song data in currentsong\n        currentsong.artist = data.room.metadata.current_song.metadata.artist;\n        currentsong.song = data.room.metadata.current_song.metadata.song;\n        currentsong.genre = data.room.metadata.current_song.metadata.genre;\n\n        /* First check for artist */\n        var idx = findAction(currentsong.artist, Actions.artists);\n        if (idx != -1) {\n            //bot.vote(Actions.artists[idx].vote);\n            if (Actions.artists[idx].speak !== \"\") {\n                bot.speak(Actions.artists[idx].speak);\n            }\n            //dislike = Actions.artists[idx].dislike;\n            //voted = true;\n            //console.log(\"Autobop by artist\");\n        }\n\n        /* Then check for song */\n        idx = findAction(currentsong.song, Actions.songs);\n        if (idx != -1) {\n            //bot.vote(Actions.songs[idx].vote);\n            if (Actions.songs[idx].speak !== \"\") {\n                bot.speak(Actions.songs[idx].speak);\n            }\n            //dislike = Actions.songs[idx].dislike;\n            //voted = true;\n            //console.log(\"Autobop by song\");\n        }\n\n        /* Then check for genre */\n        idx = findAction(currentsong.genre, Actions.genres);\n        if (idx != -1) {\n            //bot.vote(Actions.genres[idx].vote);\n            if (Actions.genres[idx].speak !== \"\") {\n                bot.speak(Actions.genres[idx].speak);\n            }\n            //dislike = Actions.genres[idx].dislike;\n            //voted = true;\n            //console.log(\"Autobop by genre\");\n        }\n    }\n\n    /* Check the song length and bitch if it is too long */\n    if (config.monitorsonglength) {\n        if (data.room.metadata.current_song.metadata.length >= config.maxsonglength) {\n            var songlength = Math.round(data.room.metadata.current_song.metadata.length / 60);\n            bot.speak(\"Really?? We have to listen to a \" + songlength + \" minute song? Is that really nessesary?\");\n        }\n    }\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* endsong */\n/* ============================ */\nbot.on('endsong', function(data) {\ntry {\n    //Log song in DB\n    if (config.database.usedb) {\n        addSongToDb();\n    }\n\n    if (dislike) {\n        dislike = false;\n    }\n    votelog = [];\n    voted = false;\n\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* update_votes */\n/* ============================ */\nbot.on('update_votes', function(data) {\ntry {\n    //Update vote and listener count\n    currentsong.up = data.room.metadata.upvotes;\n    currentsong.down = data.room.metadata.downvotes;\n    currentsong.listeners = data.room.metadata.listeners;\n\n    var votelog = data.room.metadata.votelog;\n    for (var i = 0; i < votelog.length; i++) {\n        var userid = votelog[i][0];\n        //console.log(\"Update Vote: \" + userid);\n        if (userid !== \"\") {\n            usersList[userid].lastActivity = new Date();\n        } else {\n            console.log(\"Update Vote: \" + userid);\n        }\n    }\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* add_dj */\n/* ============================ */\nbot.on('add_dj', function(data) {\ntry{\n    if (config.consolelog) {\n        console.log('Added DJ: ', data);\n    }\n\n    NewDjFromQueue(data);\n\n    var user = data.user[0];\n    usersList[user.userid].lastActivity = new Date();\n\n    /*if (data.user[0].userid === '4f7a1a75aaa5cd26ee005b5f'){ bot.speak(\"Me hopes that @Lord of Nerds plays GOOD music this time.\"); }*/\n\n    CheckAutoDj();\n\n    UpdateDjs();\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n\n});\n\n/* ============================ */\n/* rem_dj */\n/* ============================ */\nbot.on('rem_dj', function(data) {\n\ntry {\n    if (config.consolelog) {\n        console.log('Removed DJ: ', data);\n    }\n\n    /* Notify the next DJ on the list */\n    NextDjOnQueue();\n\n    CheckAutoDj();\n\n    UpdateDjs();\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n\n});\n\n/* ============================ */\n/* registered */\n/* Runs when a user joins */\n/* ============================ */\nbot.on('registered', function(data) {\n\ntry {\n\n    //Log event in console\n    if (config.consolelog) {\n        console.log('Joined room: ' + data.user[0].name);\n    }\n\n    //Add user to usersList\n    var user = data.user[0];\n    user.lastActivity = new Date();\n    usersList[user.userid] = user;\n    if (currentsong !== null) {\n        currentsong.listeners++;\n    }\n\n    //Add user to user table\n    if (config.database.usedb) {\n        if (user.name !== null) {\n            client.query('INSERT INTO ' + config.database.dbname + '.' + config.database.tablenames.user + ' (userid, username, lastseen)' + 'VALUES (?, ?, NOW()) ON DUPLICATE KEY UPDATE lastseen = NOW()', [user.userid, user.name]);\n        }\n    }\n\n    if (config.enableQueue) {\n        bot.pm(\"Greetings @\" + data.user[0].name + \". If you would like to DJ, please type 'q+' to get added to the queue.\", data.user[0].userid);\n    }\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* registered */\n/* Runs when a user joins */\n/* ============================ */\nbot.on('deregistered', function(data) {\ntry {\n    delete usersList[data.user[0].userid];\n    if (data.user[0].userid == config.botinfo.userid){\n        killBot(\"4dfb57154fe7d061dd013a44\");\n    }\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* registered */\n/* Runs when a user joins */\n/* ============================ */\nbot.on('booted_user', function(data) {\ntry{\n    console.log(\"booted_user: \" + data);\n    /*if (data.user[0].userid == config.botinfo.userid){\n        killBot(\"4dfb57154fe7d061dd013a44\");\n    }*/\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* update_user */\n/* ============================ */\nbot.on('update_user', function(data) {\ntry{\n    //Log event in console\n    if (config.consolelog) {\n        console.log('Edited user: ' + data);\n    }\n\n    //Update user name in users table\n    /*if (config.database.usedb && (data.name !== null)) {\n        client.query('INSERT INTO ' + config.database.dbname + '.' + config.database.tablenames.user +\n            ' (userid, username, lastseen)' +\n            'VALUES (?, ?, NOW()) ON DUPLICATE KEY UPDATE lastseen = NOW()',\n                [data.userid, data.name]);\n    }*/\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* snagged */\n/* ============================ */\nbot.on('snagged', function(data) {\ntry{\n    //Increase song snag count\n    currentsong.snags++;\n\n    var userid = data.userid;\n    usersList[userid].lastActivity = new Date();\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* speak */\n/* ============================ */\nbot.on('speak', function(data) {\ntry{\n    //Log in db (chatlog table)\n    /*if (config.database.usedb) {\n        client.query('INSERT INTO ' + config.database.dbname + '.' + config.database.tablenames.chat + ' '\n            + 'SET userid = ?, chat = ?, time = NOW()',\n            [data.userid, data.text]);\n    }*/\n    usersList[data.userid].lastActivity = new Date();\n\n    if (data.text == \"roll\") {\n        var roll = Math.ceil(Math.random() * 6);\n        if (!alreadyRolled) {\n            if (currentsong.djid == data.userid) {\n                alreadyRolled = true;\n                if (roll > 4) {\n                    bot.speak(data.name + ', you rolled a ' + roll + ', Awesome!');\n                    bot.vote('up');\n                } else if (roll === 1) {\n                    bot.speak(data.name + ', you rolled a ' + roll + ', Lame!');\n                    bot.vote('down');\n                } else {\n                    bot.speak(data.name + ', you rolled a ' + roll + ', bummer.');\n                }\n                bonusvote = true;\n            } else {\n                bot.speak(\"@Uglee roll\");\n            }\n        }\n    }\n\n    /* Catch all for the morons that can't read. */\n    if (data.text == \"!q+\" || data.text == \"q+\" || data.text == \"addme\" || data.text.match(/^\\/addme$/) || data.text.match(/^\\/a$/) || data.text.match(/^\\!a$/) || data.text.match(/^\\/q$/)) {\n        AddToQueue(data.userid);\n    }\n\n    if (data.text == \"!q-\" || data.text == \"q-\") {\n        RemoveFromQueue(data.userid);\n    }\n\n    if (data.text == \"q\") {\n        QueueStatus();\n    }\n\n    if (data.text.substring(0, 2) == \"iq\") {\n        if (data.text == \"iq\") {\n            bot.speak(\"Usage: iq position username\");\n        } else {\n            var position = data.text.substring(2, 3);\n            var username = data.text.substring(5).substring(1);\n            console.log(\"Position: \" + position);\n            client.query(\"SELECT `userid` FROM \" + config.database.dbname + \".\" + config.database.tablenames.user + \" WHERE `username` = ?\", [username], function select(error, results, fields) {\n                InsertInQueue(results[0]['userid'], position);\n            });\n        }\n    }\n\n    if (data.text.substring(0, 2) == \"dq\") {\n        if (data.text == \"dq\") {\n            bot.speak(\"Usage: dq username\");\n        } else {\n            var username = data.text.substring(3).substring(1);\n            console.log(username);\n            client.query(\"SELECT `userid` FROM \" + config.database.dbname + \".\" + config.database.tablenames.user + \" WHERE `username` = ?\", [username], function select(error, results, fields) {\n                RemoveFromQueue(results[0]['userid']);\n            });\n        }\n    }\n\n    /*var twss = require('twss');\n    twss.threshold = 0.9;\n    //console.log(\"Probability: \" + twss.prob(data.text));\n    if (twss.is(data.text)) {\n        var roll1 = Math.ceil(Math.random() * 20);\n        //console.log(\"TWSS roll: \" + roll1);\n        if (roll1 >= 19) {\n            bot.speak(\"That's what she said!\");\n        }\n    }*/\n\n    if (isBanned(data.userid)) {\n        return;\n    }\n\n    if (data.text == \"roll again jerk\" && admin(data.userid)) {\n        var roll2 = Math.ceil(Math.random() * 6);\n        if (roll2 > 4) {\n            bot.speak(data.name + ', you rolled a ' + roll2 + ', Awesome!');\n            bot.vote('up');\n        } else {\n            bot.speak(data.name + ', you rolled a ' + roll2 + ', bummer.');\n        }\n    }\n\n    if (data.text == \"/me kicks @Uglee\" && admin(data.userid)) {\n        bot.speak(\"Fine! *grumble*Jerk*mumble*\");\n        bot.vote(\"up\");\n    }\n\n    if (data.text == \"Fuck you @Uglee\") {\n        bot.speak(\"Fuck you too!\");\n    }\n\n    if (data.text.match(/^\\!putmeinthequeuedouchebag$/)) {\n        bot.speak(\"Leave me alone, @ShiningDimLight\");\n    }\n\n    var result = data.text.match(/^\\@(.*?)( .*)?$/);\n    if (result) {\n\n        // break out the command and parameter if one exists\n        var botName = result[1].trim().toLowerCase();\n        var command = '';\n\n        if (result.length == 3 && result[2]) {\n            command = result[2].trim().toLowerCase();\n        }\n\n        if (config.botName.toLowerCase() == botName) {\n\n            console.log(data.name, \" >> \", data.text);\n\n            delete require.cache['./actions.js'];\n            var Actions = require('./actions.js');\n\n            if (config.consolelog) {\n                console.log('Command is', command);\n            }\n\n            switch (command) {\n            case \"addsong\":\n                addSong(data.userid);\n                break;\n\n            case \"votenext\":\n                VoteNextSong();\n                break;\n\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n                ProcessVote(command);\n                break;\n\n            case \"endcts\":\n            case \"stopcts\":\n                if (isMod(data.userid)) {\n                    if (ctsActive) {\n                        ctsActive = false;\n                        ctsLastWords = null;\n                        bot.speak(\"Sorry folks, the game is over. Play what you want now.\");\n                    }\n                }\n                break;\n\n            case \"startcts\":\n                if (isMod(data.userid)) {\n                    if (!ctsActive) {\n                        ctsActive = true;\n                        bot.speak(\"We are now playing 'Connect the Songs' each DJ must play a song with at least one word in the title from the previous song title. It will begin with the next song. The best score is currently \" + ctsSequenceMax);\n                    }\n                }\n                break;\n\n            case \"enableq\":\n            case \"enablequeue\":\n            case \"startq\":\n            case \"startqueue\":\n                if (isMod(data.userid)) {\n                    config.enableQueue = true;\n                    bot.speak(\"We are now using a queue! Sign up using 'q+'.\");\n                    enableQueueCache();\n                }\n                break;\n\n            case \"endq\":\n            case \"endqueue\":\n            case \"stopq\":\n            case \"stopqueue\":\n                if (isMod(data.userid)) {\n                    config.enableQueue = false;\n                    djQueue = [];\n                    bot.speak(\"There is no queue...\");\n                    clearQueueCache();\n                }\n                break;\n\n            case \"mod\":\n                summonModerators();\n                break;\n\n            case \"news\":\n                bot.speak(announcement);\n                break;\n\n            case \"listenercount\":\n                bot.speak(\"There is \" + currentsong.listeners + \" listeners right now.\");\n                break;\n\n            case \"ctsmax\":\n                bot.speak(\"The highest 'Connect the Songs' count is: \" + ctsSequenceMax);\n                break;\n\n            case \"summonbouncer\":\n                if (isMod(data.userid)) {\n                    summonBouncer();\n                }\n                break;\n\n            case \"dismissbouncer\":\n                if (admin(data.userid)) {\n                    dismissBouncer();\n                }\n                break;\n\n            case \"die\":\n                killBot(data.userid);\n                break;\n\n            case \"userCount\":\n                bot.roomInfo(true, function(data) {\n                    console.log(data.room.metadata.listeners);\n                    bot.speak(\"Total users in room is: \" + data.room.metadata.listeners);\n                });\n                break;\n\n            default:\n                if (command === \"\") {\n                    bot.speak('Yes Master @' + data.name + '? Here is what I can do for you: speak | dance | menu | whois | startcts | stopcts');\n                } else {\n                    var idx = findAction(command, Actions.chat_responses);\n                    if (idx != -1) {\n                        bot.speak(Actions.chat_responses[idx].response1.replace(\"{0}\", data.name));\n                        if (Actions.chat_responses[idx].response2 !== \"\") {\n                            pause(500);\n                            bot.speak(Actions.chat_responses[idx].response2.replace(\"{0}\", data.name));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============================ */\n/* pmmed */\n/* ============================ */\nbot.on('pmmed', function(data) {\ntry {\n    if (config.consolelog) {\n        console.log('Private message: ', data);\n    }\n\n    if (isBanned(data.senderid)) {\n        return;\n    }\n\n    console.log(\"PMMED >> \", data.text);\n    console.log('Private message: ', data);\n\n    //if (data.text.match(/^Uglee$/) && data.senderid == '4e7bf475a3f7511657030c34') {\n    //var reg = RegExp(escape(\"Uglee\"), \"i\");\n    if (data.senderid == '4e7bf475a3f7511657030c34') {\n        var query = escape(data.text);\n        var reg = RegExp(escape(\"Uglee\"));\n        if (reg.test(query)) {\n            ammResponded = true;\n            console.log(\"AMM Responded\");\n        }\n    }\n\n    var result = data.text.match(/^(.*?)( .*)?$/);\n    if (result) {\n        // break out the command and parameter if one exists\n        var command = result[1].trim().toLowerCase();\n        var param = '';\n        if (result.length == 3 && result[2]) {\n            param = result[2].trim().toLowerCase();\n        }\n        // handle valid commands\n        if (config.consolelog) {\n            console.log('Command: ', command);\n            console.log('Param: ', param);\n        }\n\n        switch (command) {\n        case \"die\":\n            killBot(data.senderid);\n            break;\n\n        case \"addsong\":\n            addSong(data.senderid);\n            break;\n\n        case \"summonbouncer\":\n            if (isMod(data.senderid)) {\n                summonBouncer();\n            }\n            break;\n\n        case \"dismissbouncer\":\n            if (admin(data.senderid)) {\n                dismissBouncer();\n            }\n            break;\n\n        case \"news\":\n            bot.speak(announcement);\n            break;\n\n        case \"djwarn\":\n            mustAwesome(param);\n            break;\n\n        case \"stepup\":\n            if (admin(data.senderid)) {\n                stepUp();\n            }\n            break;\n\n        case \"stepdown\":\n            if (admin(data.senderid)) {\n                stepDown();\n            }\n            break;\n\n        case \"skip\":\n            if (admin(data.senderid)) {\n                bot.skip();\n            }\n            break;\n\n        case \"votenext\":\n            VoteNextSong();\n            break;\n\n        case \"roll\":\n            var roll2 = Math.ceil(Math.random() * 6);\n            if (roll2 > 4) {\n                bot.speak('A ' + roll2 + ' has been rolled on your behalf, Awesome!');\n                bot.vote('up');\n            } else {\n                bot.speak('A ' + roll2 + ' has been rolled on your behalf, bummer.');\n            }\n            break;\n\n        case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\":\n        case \"5\":\n            ProcessVote(command);\n            break;\n\n        case \"autodj\":\n            if (admin(data.senderid)) {\n                config.autodj = param;\n                bot.pm(\"Autodj set to: \" + config.autodj, data.senderid);\n            }\n            break;\n\n        case \"autobop\":\n            if (admin(data.senderid)) {\n                config.autobop = param;\n                bot.pm(\"Autobop set to: \" + config.autobop, data.senderid);\n            }\n            break;\n\n        case \"setlaptop\":\n            bot.modifyLaptop(param);\n            break;\n\n        case \"avatar\":\n            bot.setAvatar(param);\n            break;\n\n        case \"speak\":\n            if (isMod(data.senderid)) {\n                bot.speak(param);\n            }\n            break;\n\n        case \"findidle\":\n            if (isMod(data.senderid)) {\n                findIdle(data.senderid);\n            }\n            break;\n\n        case \"goto\":\n            if (admin(data.senderid)) {\n                if (param == \"amm\") {\n                    bot.roomDeregister();\n                    bot.roomRegister('4ea390ac14169c0cc3caa078');\n                }\n                /*else if (param == \"maw\") {\n                    bot.roomDeregister();\n                    bot.roomRegister('4ef82538590ca23e33001b3b');\n                } else if (param == \"bootcamp\") {\n                    bot.roomDeregister();\n                    bot.roomRegister('4f46ecd8590ca24b66000bfb');\n                } else if (param == \"tgshuffle\") {\n                    bot.roomDeregister();\n                    bot.roomRegister('4f5e1e11590ca246db01e6fc');\n                }*/\n                else if (param == \"vip\") {\n                    bot.roomDeregister();\n                    bot.roomRegister('4f73ef36eb35c10888004976');\n                } else if (param == \"hothits\") {\n                    bot.roomDeregister();\n                    bot.roomRegister(\"4f5f162268f554664cc5b2c4\");\n                }\n                /*else if (param == \"campfire\") {\n                    bot.speak(\"The campfire is lit! See you there! http://murl.me/campfire\");\n                    bot.roomDeregister();\n                    bot.roomRegister('4f6c119d68f5540c6d1dd67d');\n                }*/\n                else {\n                    bot.roomDeregister();\n                    bot.roomRegister(param);\n                }\n            }\n            break;\n\n        case \"help\":\n            if (isMod(data.senderid)) {\n                bot.pm(\"You can awesome (or a) | lame (or l) | djwarn 1 | djwarn 2 | findidle | summonbouncer\", data.senderid);\n            }\n            if (admin(data.senderid)) {\n                pause(500);\n                bot.pm(\"roll | step up | step down | skip | die | summonbouncer | dismissbouncer\", data.senderid);\n            }\n            break;\n        }\n    }\n\n} catch  (e) {\n\tconsole.log(\"*** Error *** \" + e);\n}\n});\n\n/* ============== */\n/* AddToQueue */\n/* ============== */\nglobal.AddToQueue = function(userid) {\n    var text = \"\";\n\n    if (config.enableQueue) { /* Check if they are a DJ */\n        if (djs.indexOf(userid) == -1) { /* Check if they are already on the queue*/\n            if (djQueue.indexOf(userid) == -1) {\n                djQueue.push(userid);\n                text = \"@\" + usersList[userid].name + \", you have been added to the queue. There is a total of \" + djQueue.length + \" now.\";\n                bot.speak(text);\n                console.log(djQueue);\n                if (config.database.usedb) {\n                    client.query(\"UPDATE \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" SET `value` = ? WHERE `key` = 'djQueue'\", [djQueue]);\n                }\n            }\n        } else {\n            text = \"@\" + usersList[userid].name + \", seriously?!? Can't you wait until you're OFF the TABLE before adding yourself to the queue again? FAIL! \";\n            bot.speak(text);\n        }\n    }\n};\n\n/* ============== */\n/* InsertInQueue */\n/* ============== */\nglobal.InsertInQueue = function(userid, position) {\n    var text = \"\";\n\n    if (config.enableQueue) { /* Check if they are a DJ */\n        if (djs.indexOf(userid) == -1) { /* Check if they are already on the queue*/\n            if (djQueue.indexOf(userid) == -1) {\n                djQueue.splice((position - 1), 0, userid);\n                text = \"@\" + usersList[userid].name + \", you have been added to the queue. There is a total of \" + djQueue.length + \" now.\";\n                bot.speak(text);\n                console.log(djQueue);\n                if (config.database.usedb) {\n                    client.query(\"UPDATE \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" SET `value` = ? WHERE `key` = 'djQueue'\", [djQueue]);\n                }\n            }\n        }\n    }\n};\n\n/* ============== */\n/* RemoveFromQueue */\n/* ============== */\nglobal.RemoveFromQueue = function(userid) {\n    if (config.enableQueue) {\n        if (djQueue.indexOf(userid) != -1) {\n            djQueue.splice(djQueue.indexOf(userid), 1);\n            bot.speak(\"You have been removed from the queue @\" + usersList[userid].name);\n            if (config.database.usedb) {\n                client.query(\"UPDATE \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" SET `value` = ? WHERE `key` = 'djQueue'\", [djQueue]);\n            }\n        }\n    }\n};\n\n/* ============== */\n/* NewDjFromQueue */\n/* ============== */\nglobal.NewDjFromQueue = function(data) {\n    if (config.enableQueue) {\n        var text = \"\";\n        console.log(nextDj);\n        if (djQueue.length > 0) {\n            if (data.user[0].userid != djQueue[qPosn]) {\n                bot.remDj(data.user[0].userid);\n                if (nextDj === null || nextDj === \"\") {\n                    nextDj = djQueue[qPosn];\n                    if (nextDj === null || nextDj === undefined) {\n                        djQueue.splice(djQueue.indexOf(djQueue[qPosn]), 1);\n                        if (config.database.usedb) {\n                            client.query(\"UPDATE \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" SET `value` = ? WHERE `key` = 'djQueue'\", [djQueue]);\n                        }\n                        return;\n                    }\n                }\n                text = \"Sorry @\" + usersList[data.user[0].userid].name + \", it's @\" + usersList[nextDj].name + \" turn. You need to wait your turn.\";\n                bot.speak(text);\n            } else {\n                djQueue.splice(djQueue.indexOf(data.user[0].userid), 1);\n                if (config.database.usedb) {\n                    client.query(\"UPDATE \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" SET `value` = ? WHERE `key` = 'djQueue'\", [djQueue]);\n                }\n                clearInterval(queueRefreshIntervalId);\n                nextDj = \"\";\n            }\n        }\n    }\n};\n\n/* ============== */\n/* NextDjOnQueue */\n/* ============== */\nglobal.NextDjOnQueue = function() {\n    qPosn = 0;\n    if (config.enableQueue) {\n        if (djQueue.length > 0) {\n            while (usersList[djQueue[qPosn]] === undefined) {\n                if (missedQueue.indexOf(nextDj) == -1) {\n                    missedQueue.push(djQueue[qPosn]);\n                    var moron = djQueue[qPosn];\n                    djQueue.splice(djQueue.indexOf(moron), 1);\n                    djQueue.push(moron);\n                    if (qPosn < djQueue.length) {\n                        qPosn++;\n                    } else {\n                        bot.speak(\"The queue is empty. All DJs in the queue are currently not here. Anyone can DJ at this time!\");\n                        return;\n                    }\n                } else {\n                    djQueue.splice(djQueue.indexOf(djQueue[qPosn]), 1);\n                    missedQueue.splice(djQueue.indexOf(djQueue[qPosn]), 1);\n                }\n                if (config.database.usedb) {\n                    client.query(\"UPDATE \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" SET `value` = ? WHERE `key` = 'djQueue'\", [djQueue]);\n                }\n            }\n            var text = \"It is now @\" + usersList[djQueue[qPosn]].name + \"'s turn to DJ! You have \" + config.nextDjQueueTimeout + \" seconds to step up.\";\n            if (djQueue.length > qPosn + 1) {\n                text += \" @\" + usersList[djQueue[qPosn + 1]].name + \" is on deck.\";\n                bot.pm(\"Your on deck. Get ready to DJ.\", djQueue[qPosn + 1]);\n            }\n            bot.speak(text);\n            bot.pm(\"It's your turn to DJ.\", djQueue[qPosn]);\n            nextDj = djQueue[qPosn];\n            nextDjTime = new Date();\n            queueRefreshIntervalId = setInterval(CheckForNextDjFromQueue, 5000);\n        } else {\n            bot.speak(\"The queue is empty. Anyone can DJ at this time!\");\n        }\n    }\n};\n\n/* ============== */\n/* CheckForNextDjFromQueue */\n/* ============== */\nglobal.CheckForNextDjFromQueue = function() {\n    if (nextDj !== \"\" && djQueue[qPosn] == nextDj) {\n        var currentTime = new Date();\n        if (currentTime.getTime() - nextDjTime.getTime() > (config.nextDjQueueTimeout * 1000)) {\n            if (missedQueue.indexOf(nextDj) == -1) {\n                missedQueue.push(nextDj);\n                djQueue.splice(djQueue.indexOf(userid), 1);\n                InsertInQueue(nextDj, 2);\n                bot.speak(\"Too late @\" + usersList[nextDj].name + \" you can try once more on the next opening.\");\n            } else {\n                djQueue.splice(djQueue.indexOf(userid), 1);\n                missedQueue.splice(djQueue.indexOf(userid), 1);\n                bot.speak(\"Sorry @\" + usersList[nextDj].name + \", you missed out! Whatta looser! You can add yourself back to the queue, but pay attention this time.\");\n            }\n            if (config.database.usedb) {\n                client.query(\"UPDATE \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" SET `value` = ? WHERE `key` = 'djQueue'\", [djQueue]);\n            }\n            clearInterval(queueRefreshIntervalId);\n            NextDjOnQueue();\n        }\n    }\n};\n\n/* ============== */\n/* QueueStatus */\n/* ============== */\nglobal.QueueStatus = function() {\n\n    if (config.enableQueue) {\n        var djList = \"\";\n\n        for (var i = 0; i < djQueue.length; i++) {\n            console.log(djQueue[i]);\n            console.log(usersList[djQueue[i]]);\n            if (usersList[djQueue[i]] !== undefined) {\n                djList += usersList[djQueue[i]].name + \", \";\n            } else {\n                djList += \"(dj out of room), \";\n            }\n        }\n\n        if (config.enableQueue) {\n            if (djQueue.length !== 0) {\n                var text = djQueue.length + \" DJ(s) in the queue. They are: \" + djList;\n                bot.speak(text);\n            } else {\n                bot.speak(\"Queue is empty!\");\n            }\n        }\n    }\n};\n\nvar enableQueueCache = function() {\n        if (config.database.usedb) {\n            client.query('INSERT INTO ' + config.database.dbname + '.' + config.database.tablenames.cache + ' (`key`, `value`, `DateStamp`) VALUES (?, ?, CURRENT_TIMESTAMP)', [\"enableQueue\", config.enableQueue]);\n            client.query('INSERT INTO ' + config.database.dbname + '.' + config.database.tablenames.cache + ' (`key`, `value`, `DateStamp`) VALUES (?, ?, CURRENT_TIMESTAMP)', [\"djQueue\", djQueue]);\n        }\n    };\n\nvar clearQueueCache = function() {\n        if (config.database.usedb) {\n            client.query(\"DELETE FROM \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" WHERE `key` = 'enableQueue'\");\n            client.query(\"DELETE FROM \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" WHERE `key` = 'djQueue'\");\n        }\n    };\n\n\n\n/* ============== */\n/* UpdateDjs - Check to see if the user is a moderator */\n/* ============== */\nglobal.UpdateDjs = function() {\n    bot.roomInfo(function(data) { /* Update the list since we are here */\n        djs = data.room.metadata.djs;\n        moderators = data.room.metadata.moderator_id;\n    });\n};\n\n/* ============== */\n/* SetCacheValue - Sets the value to the DB cache */\n/* ============== */\nglobal.SetCacheValue = function(key, value) {\n    if (config.database.usedb) {\n        client.query(\"SELECT `value` FROM \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" WHERE `key` = ?\", [key], function select(error, results, fields) {\n            if (results.length !== 0) {\n                client.query(\"UPDATE \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" SET `value` = ? WHERE `key` = ?\", [value, key]);\n            } else {\n                client.query('INSERT INTO ' + config.database.dbname + '.' + config.database.tablenames.cache + ' (`key`, `value`, `DateStamp`) VALUES (?, ?, CURRENT_TIMESTAMP)', [key, value]);\n            }\n        });\n    }\n};\n\n/* ============== */\n/* GetCacheValue - Gets the value from the DB cache */\n/* ============== */\nglobal.GetCacheValue = function(key, callback) {\n    if (config.database.usedb) {\n        client.query(\"SELECT `value` FROM \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" WHERE `key` = ?\", [key], function select(error, results, fields) {\n            if (results.length !== 0) {\n                callback(results[0]['value']);\n            } else {\n                callback(null);\n            }\n        });\n    }\n};\n\n/* ============== */\n/* RemoveCacheValue - Sets the value to the DB cache */\n/* ============== */\nglobal.RemoveCacheValue = function(key) {\n    if (config.database.usedb) {\n        client.query(\"DELETE FROM \" + config.database.dbname + \".\" + config.database.tablenames.cache + \" WHERE `key` = ?\", [key]);\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":53002}]],"length":53002}
